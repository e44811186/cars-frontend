// === –í–°–¢–ê–í–¨ –≠–¢–û –í –ù–ê–ß–ê–õ–û auth-modal.js ===
(function ensureAuthModalExists() {
  if (!document.getElementById('authModal')) {
    const modalHTML = `
      <div id="authModal" class="modal-overlay">
        <div id="loginModal" class="auth-modal">
          <h2>–í—Ö–æ–¥</h2>
          <form id="loginForm">
            <input type="text" name="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
            <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
            <span class="toggle-password">üëÅÔ∏è</span>
            <button type="submit">–í–æ–π—Ç–∏</button>
          </form>
          <div class="toggle" id="toRegister">–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</div>
        </div>
        <div id="registerModal" class="auth-modal" style="display:none;">
          <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
          <form id="registerForm">
            <input type="text" name="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
            <input type="email" name="email" placeholder="Email" required>
            <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
            <span class="toggle-password">üëÅÔ∏è</span>
            <button type="submit">–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
          </form>
          <div class="toggle" id="toLogin">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏</div>
        </div>
      </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
  }
})();
// auth-modal.js
(function () {
  const API_URL = "https://cars-api-ur5t.onrender.com/api/auth";

  // —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª–∫–∏
  const authModal = document.getElementById('authModal');
  const loginModal = document.getElementById('loginModal');
  const registerModal = document.getElementById('registerModal');
  const loginForm = document.getElementById('loginForm');
  const registerForm = document.getElementById('registerForm');
  const toRegister = document.getElementById('toRegister');
  const toLogin = document.getElementById('toLogin');

  function openAuthModal(mode = 'login') {
    if (!authModal) return;
    document.body.classList.add('modal-open');
    authModal.classList.add('active');
    if (mode === 'register') {
      if (loginModal) loginModal.style.display = 'none';
      if (registerModal) registerModal.style.display = 'block';
    } else {
      if (loginModal) loginModal.style.display = 'block';
      if (registerModal) registerModal.style.display = 'none';
    }
  }

  function closeAuthModal() {
    if (!authModal) return;
    document.body.classList.remove('modal-open');
    authModal.classList.remove('active');
  }

  function disableButton(btn, time = 1500) {
    if (!btn) return;
    btn.disabled = true;
    btn.classList && btn.classList.add('disabled');
    setTimeout(() => {
      btn.disabled = false;
      btn.classList && btn.classList.remove('disabled');
    }, time);
  }

  // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º
  if (toRegister) toRegister.addEventListener('click', () => openAuthModal('register'));
  if (toLogin) toLogin.addEventListener('click', () => openAuthModal('login'));

  // –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å (–∏–∫–æ–Ω–∫–∞ —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å class="toggle-password")
  document.addEventListener('click', (e) => {
    const t = e.target.closest('.toggle-password');
    if (!t) return;
    const inp = t.previousElementSibling;
    if (!inp) return;
    inp.type = inp.type === 'password' ? 'text' : 'password';
    t.textContent = inp.type === 'password' ? 'üëÅÔ∏è' : 'üôà';
  });

  // --- LOGIN ---
  if (loginForm) {
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const btn = loginForm.querySelector('button');
      disableButton(btn, 2000);

      const payload = {
        username: loginForm.username.value.trim(),
        password: loginForm.password.value
      };

      try {
        const res = await fetch(`${API_URL}/login`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        if (!res.ok) {
          const txt = await res.text().catch(() => null);
          throw new Error(txt || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
        }

        // –æ–∂–∏–¥–∞–µ–º JSON { token: "..." } –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–π
        const json = await res.json().catch(() => null);
        const token = json && (json.token || json.accessToken || json.authToken);

        if (!token) {
          // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —É—Å–ø–µ—Ö–∞, —Å–æ–æ–±—â–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
          alert('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.');
        } else {
          localStorage.setItem('authToken', token);
        }

        // –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        if (typeof window.updateProfileMenu === 'function') window.updateProfileMenu();

        closeAuthModal();
        // –Ω–µ –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–∂–º—ë—Ç "–ü—Ä–æ—Ñ–∏–ª—å" –∏–ª–∏ –ø–µ—Ä–µ–π–¥—ë—Ç
      } catch (err) {
        alert(err.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
    });
  }

  // --- REGISTER ---
  if (registerForm) {
    registerForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const btn = registerForm.querySelector('button');
      disableButton(btn, 2000);

      const payload = {
        username: registerForm.username.value.trim(),
        email: registerForm.email ? registerForm.email.value.trim() : undefined,
        password: registerForm.password.value
      };

      try {
        const res = await fetch(`${API_URL}/register`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        if (!res.ok) {
          const txt = await res.text().catch(() => null);
          throw new Error(txt || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }

        // —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ) –∏–ª–∏ JSON —Å —Ç–æ–∫–µ–Ω–æ–º
        const bodyText = await res.text().catch(() => '');
        let token = null;
        try { const j = JSON.parse(bodyText); token = j.token || j.accessToken || j.authToken || null; } catch(_) {}

        if (token) {
          localStorage.setItem('authToken', token);
          if (typeof window.updateProfileMenu === 'function') window.updateProfileMenu();
          closeAuthModal();
        } else {
          // –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
          alert(bodyText || '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
          // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –ª–æ–≥–∏–Ω –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è
          openAuthModal('login');
          if (loginForm && registerForm) loginForm.username.value = registerForm.username.value || '';
        }
      } catch (err) {
        alert(err.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
    });
  }

  // --- CHANGE PASSWORD ---
  async function changePassword() {
    const oldPassword = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:");
    if (!oldPassword) return;
    const newPassword = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤):");
    if (!newPassword || newPassword.length < 6) return alert("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å");

    try {
      const token = localStorage.getItem('authToken');
      if (!token) return alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');

      const res = await fetch(`${API_URL}/change-password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ oldPassword, newPassword })
      });

      if (!res.ok) throw new Error(await res.text().catch(() => '–û—à–∏–±–∫–∞'));
      alert('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞: ' + (err.message || err));
    }
  }

  // --- DELETE ACCOUNT ---
  async function deleteAccount() {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?')) return;
    try {
      const token = localStorage.getItem('authToken');
      if (!token) return alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');

      const res = await fetch(`${API_URL}/delete`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (!res.ok) throw new Error(await res.text().catch(() => '–û—à–∏–±–∫–∞'));
      localStorage.removeItem('authToken');
      if (typeof window.updateProfileMenu === 'function') window.updateProfileMenu();
      alert('–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω');
      location.reload();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞: ' + (err.message || err));
    }
  }

  // --- LOGOUT ---
  function logout() {
    localStorage.removeItem('authToken');
    if (typeof window.updateProfileMenu === 'function') window.updateProfileMenu();
    location.reload();
  }

  // —ç–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å, —á—Ç–æ–±—ã profile-menu.js –º–æ–≥ –≤—ã–∑—ã–≤–∞—Ç—å
  window.openAuthModal = openAuthModal;
  window.closeAuthModal = closeAuthModal;
  window.logout = logout;
  window.changePassword = changePassword;
  window.deleteAccount = deleteAccount;

  // –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç (–µ—Å–ª–∏ profile-menu.js —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, updateProfileMenu –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
  if (typeof window.updateProfileMenu === 'function') window.updateProfileMenu();

  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ cabinet.html –∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  try {
    if (location.pathname.endsWith('cabinet.html') && !localStorage.getItem('authToken')) {
      openAuthModal('login');
    }
  } catch (_) {}
})();
